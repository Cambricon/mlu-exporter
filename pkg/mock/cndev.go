// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Cambricon/mlu-exporter/pkg/cndev (interfaces: Cndev)
//
// Generated by this command:
//
//	mockgen -package mock -destination pkg/mock/cndev.go -mock_names=Cndev=Cndev github.com/Cambricon/mlu-exporter/pkg/cndev Cndev
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	cndev "github.com/Cambricon/mlu-exporter/pkg/cndev"
	gomock "go.uber.org/mock/gomock"
)

// Cndev is a mock of Cndev interface.
type Cndev struct {
	ctrl     *gomock.Controller
	recorder *CndevMockRecorder
	isgomock struct{}
}

// CndevMockRecorder is the mock recorder for Cndev.
type CndevMockRecorder struct {
	mock *Cndev
}

// NewCndev creates a new mock instance.
func NewCndev(ctrl *gomock.Controller) *Cndev {
	mock := &Cndev{ctrl: ctrl}
	mock.recorder = &CndevMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Cndev) EXPECT() *CndevMockRecorder {
	return m.recorder
}

// DeviceMimModeEnabled mocks base method.
func (m *Cndev) DeviceMimModeEnabled(idx uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceMimModeEnabled", idx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceMimModeEnabled indicates an expected call of DeviceMimModeEnabled.
func (mr *CndevMockRecorder) DeviceMimModeEnabled(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceMimModeEnabled", reflect.TypeOf((*Cndev)(nil).DeviceMimModeEnabled), idx)
}

// DeviceSmluModeEnabled mocks base method.
func (m *Cndev) DeviceSmluModeEnabled(idx uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSmluModeEnabled", idx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceSmluModeEnabled indicates an expected call of DeviceSmluModeEnabled.
func (mr *CndevMockRecorder) DeviceSmluModeEnabled(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSmluModeEnabled", reflect.TypeOf((*Cndev)(nil).DeviceSmluModeEnabled), idx)
}

// GenerateDeviceHandleMap mocks base method.
func (m *Cndev) GenerateDeviceHandleMap(count uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDeviceHandleMap", count)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDeviceHandleMap indicates an expected call of GenerateDeviceHandleMap.
func (mr *CndevMockRecorder) GenerateDeviceHandleMap(count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDeviceHandleMap", reflect.TypeOf((*Cndev)(nil).GenerateDeviceHandleMap), count)
}

// GetAllMLUInstanceInfo mocks base method.
func (m *Cndev) GetAllMLUInstanceInfo(idx uint) ([]cndev.MimInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMLUInstanceInfo", idx)
	ret0, _ := ret[0].([]cndev.MimInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMLUInstanceInfo indicates an expected call of GetAllMLUInstanceInfo.
func (mr *CndevMockRecorder) GetAllMLUInstanceInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMLUInstanceInfo", reflect.TypeOf((*Cndev)(nil).GetAllMLUInstanceInfo), idx)
}

// GetAllSMluInfo mocks base method.
func (m *Cndev) GetAllSMluInfo(idx uint) ([]cndev.SmluInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSMluInfo", idx)
	ret0, _ := ret[0].([]cndev.SmluInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSMluInfo indicates an expected call of GetAllSMluInfo.
func (mr *CndevMockRecorder) GetAllSMluInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSMluInfo", reflect.TypeOf((*Cndev)(nil).GetAllSMluInfo), idx)
}

// GetDeviceAddressSwaps mocks base method.
func (m *Cndev) GetDeviceAddressSwaps(idx uint) (uint32, uint32, uint32, uint32, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceAddressSwaps", idx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(uint32)
	ret4, _ := ret[4].(uint32)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetDeviceAddressSwaps indicates an expected call of GetDeviceAddressSwaps.
func (mr *CndevMockRecorder) GetDeviceAddressSwaps(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceAddressSwaps", reflect.TypeOf((*Cndev)(nil).GetDeviceAddressSwaps), idx)
}

// GetDeviceBAR4MemoryInfo mocks base method.
func (m *Cndev) GetDeviceBAR4MemoryInfo(idx uint) (uint64, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceBAR4MemoryInfo", idx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceBAR4MemoryInfo indicates an expected call of GetDeviceBAR4MemoryInfo.
func (mr *CndevMockRecorder) GetDeviceBAR4MemoryInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceBAR4MemoryInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceBAR4MemoryInfo), idx)
}

// GetDeviceCPUUtil mocks base method.
func (m *Cndev) GetDeviceCPUUtil(idx uint) (uint16, []uint8, []uint8, []uint8, []uint8, []uint8, []uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCPUUtil", idx)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].([]uint8)
	ret2, _ := ret[2].([]uint8)
	ret3, _ := ret[3].([]uint8)
	ret4, _ := ret[4].([]uint8)
	ret5, _ := ret[5].([]uint8)
	ret6, _ := ret[6].([]uint8)
	ret7, _ := ret[7].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6, ret7
}

// GetDeviceCPUUtil indicates an expected call of GetDeviceCPUUtil.
func (mr *CndevMockRecorder) GetDeviceCPUUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCPUUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceCPUUtil), idx)
}

// GetDeviceCRCInfo mocks base method.
func (m *Cndev) GetDeviceCRCInfo(idx uint) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCRCInfo", idx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceCRCInfo indicates an expected call of GetDeviceCRCInfo.
func (mr *CndevMockRecorder) GetDeviceCRCInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCRCInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceCRCInfo), idx)
}

// GetDeviceClusterCount mocks base method.
func (m *Cndev) GetDeviceClusterCount(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceClusterCount", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceClusterCount indicates an expected call of GetDeviceClusterCount.
func (mr *CndevMockRecorder) GetDeviceClusterCount(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceClusterCount", reflect.TypeOf((*Cndev)(nil).GetDeviceClusterCount), idx)
}

// GetDeviceCndevVersion mocks base method.
func (m *Cndev) GetDeviceCndevVersion() (uint, uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCndevVersion")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(uint)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceCndevVersion indicates an expected call of GetDeviceCndevVersion.
func (mr *CndevMockRecorder) GetDeviceCndevVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCndevVersion", reflect.TypeOf((*Cndev)(nil).GetDeviceCndevVersion))
}

// GetDeviceComputeCapability mocks base method.
func (m *Cndev) GetDeviceComputeCapability(idx uint) (uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceComputeCapability", idx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceComputeCapability indicates an expected call of GetDeviceComputeCapability.
func (mr *CndevMockRecorder) GetDeviceComputeCapability(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceComputeCapability", reflect.TypeOf((*Cndev)(nil).GetDeviceComputeCapability), idx)
}

// GetDeviceComputeMode mocks base method.
func (m *Cndev) GetDeviceComputeMode(idx uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceComputeMode", idx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceComputeMode indicates an expected call of GetDeviceComputeMode.
func (mr *CndevMockRecorder) GetDeviceComputeMode(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceComputeMode", reflect.TypeOf((*Cndev)(nil).GetDeviceComputeMode), idx)
}

// GetDeviceCoreNum mocks base method.
func (m *Cndev) GetDeviceCoreNum(idx uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCoreNum", idx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCoreNum indicates an expected call of GetDeviceCoreNum.
func (mr *CndevMockRecorder) GetDeviceCoreNum(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCoreNum", reflect.TypeOf((*Cndev)(nil).GetDeviceCoreNum), idx)
}

// GetDeviceCount mocks base method.
func (m *Cndev) GetDeviceCount() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCount")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCount indicates an expected call of GetDeviceCount.
func (mr *CndevMockRecorder) GetDeviceCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCount", reflect.TypeOf((*Cndev)(nil).GetDeviceCount))
}

// GetDeviceCurrentInfo mocks base method.
func (m *Cndev) GetDeviceCurrentInfo(idx uint) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCurrentInfo", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceCurrentInfo indicates an expected call of GetDeviceCurrentInfo.
func (mr *CndevMockRecorder) GetDeviceCurrentInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCurrentInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceCurrentInfo), idx)
}

// GetDeviceCurrentPCIeInfo mocks base method.
func (m *Cndev) GetDeviceCurrentPCIeInfo(idx uint) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCurrentPCIeInfo", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceCurrentPCIeInfo indicates an expected call of GetDeviceCurrentPCIeInfo.
func (mr *CndevMockRecorder) GetDeviceCurrentPCIeInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCurrentPCIeInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceCurrentPCIeInfo), idx)
}

// GetDeviceDDRInfo mocks base method.
func (m *Cndev) GetDeviceDDRInfo(idx uint) (int, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDDRInfo", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceDDRInfo indicates an expected call of GetDeviceDDRInfo.
func (mr *CndevMockRecorder) GetDeviceDDRInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDDRInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceDDRInfo), idx)
}

// GetDeviceECCInfo mocks base method.
func (m *Cndev) GetDeviceECCInfo(idx uint) (uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceECCInfo", idx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(uint64)
	ret5, _ := ret[5].(uint64)
	ret6, _ := ret[6].(uint64)
	ret7, _ := ret[7].(uint64)
	ret8, _ := ret[8].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8
}

// GetDeviceECCInfo indicates an expected call of GetDeviceECCInfo.
func (mr *CndevMockRecorder) GetDeviceECCInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceECCInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceECCInfo), idx)
}

// GetDeviceEccMode mocks base method.
func (m *Cndev) GetDeviceEccMode(idx uint) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceEccMode", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceEccMode indicates an expected call of GetDeviceEccMode.
func (mr *CndevMockRecorder) GetDeviceEccMode(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceEccMode", reflect.TypeOf((*Cndev)(nil).GetDeviceEccMode), idx)
}

// GetDeviceFanSpeed mocks base method.
func (m *Cndev) GetDeviceFanSpeed(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceFanSpeed", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceFanSpeed indicates an expected call of GetDeviceFanSpeed.
func (mr *CndevMockRecorder) GetDeviceFanSpeed(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceFanSpeed", reflect.TypeOf((*Cndev)(nil).GetDeviceFanSpeed), idx)
}

// GetDeviceFrequency mocks base method.
func (m *Cndev) GetDeviceFrequency(idx uint) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceFrequency", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceFrequency indicates an expected call of GetDeviceFrequency.
func (mr *CndevMockRecorder) GetDeviceFrequency(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceFrequency", reflect.TypeOf((*Cndev)(nil).GetDeviceFrequency), idx)
}

// GetDeviceFrequencyStatus mocks base method.
func (m *Cndev) GetDeviceFrequencyStatus(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceFrequencyStatus", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceFrequencyStatus indicates an expected call of GetDeviceFrequencyStatus.
func (mr *CndevMockRecorder) GetDeviceFrequencyStatus(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceFrequencyStatus", reflect.TypeOf((*Cndev)(nil).GetDeviceFrequencyStatus), idx)
}

// GetDeviceHealth mocks base method.
func (m *Cndev) GetDeviceHealth(idx uint) (int, bool, bool, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceHealth", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].([]string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetDeviceHealth indicates an expected call of GetDeviceHealth.
func (mr *CndevMockRecorder) GetDeviceHealth(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceHealth", reflect.TypeOf((*Cndev)(nil).GetDeviceHealth), idx)
}

// GetDeviceHeartbeatCount mocks base method.
func (m *Cndev) GetDeviceHeartbeatCount(idx uint) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceHeartbeatCount", idx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceHeartbeatCount indicates an expected call of GetDeviceHeartbeatCount.
func (mr *CndevMockRecorder) GetDeviceHeartbeatCount(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceHeartbeatCount", reflect.TypeOf((*Cndev)(nil).GetDeviceHeartbeatCount), idx)
}

// GetDeviceImageCodecUtil mocks base method.
func (m *Cndev) GetDeviceImageCodecUtil(idx uint) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceImageCodecUtil", idx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceImageCodecUtil indicates an expected call of GetDeviceImageCodecUtil.
func (mr *CndevMockRecorder) GetDeviceImageCodecUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceImageCodecUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceImageCodecUtil), idx)
}

// GetDeviceMLUInstanceByID mocks base method.
func (m *Cndev) GetDeviceMLUInstanceByID(idx uint, instanceID int) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLUInstanceByID", idx, instanceID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMLUInstanceByID indicates an expected call of GetDeviceMLUInstanceByID.
func (mr *CndevMockRecorder) GetDeviceMLUInstanceByID(idx, instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLUInstanceByID", reflect.TypeOf((*Cndev)(nil).GetDeviceMLUInstanceByID), idx, instanceID)
}

// GetDeviceMLULinkCapability mocks base method.
func (m *Cndev) GetDeviceMLULinkCapability(idx, link uint) (uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkCapability", idx, link)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceMLULinkCapability indicates an expected call of GetDeviceMLULinkCapability.
func (mr *CndevMockRecorder) GetDeviceMLULinkCapability(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkCapability", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkCapability), idx, link)
}

// GetDeviceMLULinkCounter mocks base method.
func (m *Cndev) GetDeviceMLULinkCounter(idx, link uint) (uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkCounter", idx, link)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(uint64)
	ret5, _ := ret[5].(uint64)
	ret6, _ := ret[6].(uint64)
	ret7, _ := ret[7].(uint64)
	ret8, _ := ret[8].(uint64)
	ret9, _ := ret[9].(uint64)
	ret10, _ := ret[10].(uint64)
	ret11, _ := ret[11].(uint64)
	ret12, _ := ret[12].(uint64)
	ret13, _ := ret[13].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, ret11, ret12, ret13
}

// GetDeviceMLULinkCounter indicates an expected call of GetDeviceMLULinkCounter.
func (mr *CndevMockRecorder) GetDeviceMLULinkCounter(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkCounter", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkCounter), idx, link)
}

// GetDeviceMLULinkErrorCounter mocks base method.
func (m *Cndev) GetDeviceMLULinkErrorCounter(idx, link uint) (uint64, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkErrorCounter", idx, link)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceMLULinkErrorCounter indicates an expected call of GetDeviceMLULinkErrorCounter.
func (mr *CndevMockRecorder) GetDeviceMLULinkErrorCounter(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkErrorCounter", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkErrorCounter), idx, link)
}

// GetDeviceMLULinkEventCounter mocks base method.
func (m *Cndev) GetDeviceMLULinkEventCounter(idx, link uint) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkEventCounter", idx, link)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMLULinkEventCounter indicates an expected call of GetDeviceMLULinkEventCounter.
func (mr *CndevMockRecorder) GetDeviceMLULinkEventCounter(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkEventCounter", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkEventCounter), idx, link)
}

// GetDeviceMLULinkPPI mocks base method.
func (m *Cndev) GetDeviceMLULinkPPI(idx, link uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkPPI", idx, link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMLULinkPPI indicates an expected call of GetDeviceMLULinkPPI.
func (mr *CndevMockRecorder) GetDeviceMLULinkPPI(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkPPI", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkPPI), idx, link)
}

// GetDeviceMLULinkPortMode mocks base method.
func (m *Cndev) GetDeviceMLULinkPortMode(idx, link uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkPortMode", idx, link)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMLULinkPortMode indicates an expected call of GetDeviceMLULinkPortMode.
func (mr *CndevMockRecorder) GetDeviceMLULinkPortMode(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkPortMode", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkPortMode), idx, link)
}

// GetDeviceMLULinkPortNumber mocks base method.
func (m *Cndev) GetDeviceMLULinkPortNumber(idx uint) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkPortNumber", idx)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDeviceMLULinkPortNumber indicates an expected call of GetDeviceMLULinkPortNumber.
func (mr *CndevMockRecorder) GetDeviceMLULinkPortNumber(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkPortNumber", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkPortNumber), idx)
}

// GetDeviceMLULinkRemoteInfo mocks base method.
func (m *Cndev) GetDeviceMLULinkRemoteInfo(idx, link uint) (uint64, uint64, uint32, uint32, int32, uint64, string, string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkRemoteInfo", idx, link)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(uint32)
	ret4, _ := ret[4].(int32)
	ret5, _ := ret[5].(uint64)
	ret6, _ := ret[6].(string)
	ret7, _ := ret[7].(string)
	ret8, _ := ret[8].(string)
	ret9, _ := ret[9].(string)
	ret10, _ := ret[10].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10
}

// GetDeviceMLULinkRemoteInfo indicates an expected call of GetDeviceMLULinkRemoteInfo.
func (mr *CndevMockRecorder) GetDeviceMLULinkRemoteInfo(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkRemoteInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkRemoteInfo), idx, link)
}

// GetDeviceMLULinkSpeedInfo mocks base method.
func (m *Cndev) GetDeviceMLULinkSpeedInfo(idx, link uint) (float32, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkSpeedInfo", idx, link)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceMLULinkSpeedInfo indicates an expected call of GetDeviceMLULinkSpeedInfo.
func (mr *CndevMockRecorder) GetDeviceMLULinkSpeedInfo(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkSpeedInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkSpeedInfo), idx, link)
}

// GetDeviceMLULinkState mocks base method.
func (m *Cndev) GetDeviceMLULinkState(idx, link uint) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkState", idx, link)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceMLULinkState indicates an expected call of GetDeviceMLULinkState.
func (mr *CndevMockRecorder) GetDeviceMLULinkState(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkState", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkState), idx, link)
}

// GetDeviceMLULinkStatus mocks base method.
func (m *Cndev) GetDeviceMLULinkStatus(idx, link uint) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkStatus", idx, link)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceMLULinkStatus indicates an expected call of GetDeviceMLULinkStatus.
func (mr *CndevMockRecorder) GetDeviceMLULinkStatus(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkStatus", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkStatus), idx, link)
}

// GetDeviceMLULinkVersion mocks base method.
func (m *Cndev) GetDeviceMLULinkVersion(idx, link uint) (uint, uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMLULinkVersion", idx, link)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(uint)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceMLULinkVersion indicates an expected call of GetDeviceMLULinkVersion.
func (mr *CndevMockRecorder) GetDeviceMLULinkVersion(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMLULinkVersion", reflect.TypeOf((*Cndev)(nil).GetDeviceMLULinkVersion), idx, link)
}

// GetDeviceMaxPCIeInfo mocks base method.
func (m *Cndev) GetDeviceMaxPCIeInfo(idx uint) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMaxPCIeInfo", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceMaxPCIeInfo indicates an expected call of GetDeviceMaxPCIeInfo.
func (mr *CndevMockRecorder) GetDeviceMaxPCIeInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMaxPCIeInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceMaxPCIeInfo), idx)
}

// GetDeviceMemEccCounter mocks base method.
func (m *Cndev) GetDeviceMemEccCounter(idx uint) ([]uint32, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMemEccCounter", idx)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceMemEccCounter indicates an expected call of GetDeviceMemEccCounter.
func (mr *CndevMockRecorder) GetDeviceMemEccCounter(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMemEccCounter", reflect.TypeOf((*Cndev)(nil).GetDeviceMemEccCounter), idx)
}

// GetDeviceMemory mocks base method.
func (m *Cndev) GetDeviceMemory(idx uint) (int64, int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMemory", idx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetDeviceMemory indicates an expected call of GetDeviceMemory.
func (mr *CndevMockRecorder) GetDeviceMemory(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMemory", reflect.TypeOf((*Cndev)(nil).GetDeviceMemory), idx)
}

// GetDeviceMemoryDieCount mocks base method.
func (m *Cndev) GetDeviceMemoryDieCount(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMemoryDieCount", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMemoryDieCount indicates an expected call of GetDeviceMemoryDieCount.
func (mr *CndevMockRecorder) GetDeviceMemoryDieCount(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMemoryDieCount", reflect.TypeOf((*Cndev)(nil).GetDeviceMemoryDieCount), idx)
}

// GetDeviceMimProfileInfo mocks base method.
func (m *Cndev) GetDeviceMimProfileInfo(idx uint) ([]cndev.MimProfileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMimProfileInfo", idx)
	ret0, _ := ret[0].([]cndev.MimProfileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMimProfileInfo indicates an expected call of GetDeviceMimProfileInfo.
func (mr *CndevMockRecorder) GetDeviceMimProfileInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMimProfileInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceMimProfileInfo), idx)
}

// GetDeviceMimProfileMaxInstanceCount mocks base method.
func (m *Cndev) GetDeviceMimProfileMaxInstanceCount(idx, profile uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMimProfileMaxInstanceCount", idx, profile)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMimProfileMaxInstanceCount indicates an expected call of GetDeviceMimProfileMaxInstanceCount.
func (mr *CndevMockRecorder) GetDeviceMimProfileMaxInstanceCount(idx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMimProfileMaxInstanceCount", reflect.TypeOf((*Cndev)(nil).GetDeviceMimProfileMaxInstanceCount), idx, profile)
}

// GetDeviceModel mocks base method.
func (m *Cndev) GetDeviceModel(idx uint) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceModel", idx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceModel indicates an expected call of GetDeviceModel.
func (mr *CndevMockRecorder) GetDeviceModel(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceModel", reflect.TypeOf((*Cndev)(nil).GetDeviceModel), idx)
}

// GetDeviceNUMANodeID mocks base method.
func (m *Cndev) GetDeviceNUMANodeID(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceNUMANodeID", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceNUMANodeID indicates an expected call of GetDeviceNUMANodeID.
func (mr *CndevMockRecorder) GetDeviceNUMANodeID(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceNUMANodeID", reflect.TypeOf((*Cndev)(nil).GetDeviceNUMANodeID), idx)
}

// GetDeviceOpticalInfo mocks base method.
func (m *Cndev) GetDeviceOpticalInfo(idx, link uint) (uint8, float32, float32, []float32, []float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOpticalInfo", idx, link)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(float32)
	ret2, _ := ret[2].(float32)
	ret3, _ := ret[3].([]float32)
	ret4, _ := ret[4].([]float32)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetDeviceOpticalInfo indicates an expected call of GetDeviceOpticalInfo.
func (mr *CndevMockRecorder) GetDeviceOpticalInfo(idx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOpticalInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceOpticalInfo), idx, link)
}

// GetDeviceOsMemory mocks base method.
func (m *Cndev) GetDeviceOsMemory(idx uint) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOsMemory", idx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceOsMemory indicates an expected call of GetDeviceOsMemory.
func (mr *CndevMockRecorder) GetDeviceOsMemory(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOsMemory", reflect.TypeOf((*Cndev)(nil).GetDeviceOsMemory), idx)
}

// GetDeviceOverTemperatureInfo mocks base method.
func (m *Cndev) GetDeviceOverTemperatureInfo(idx uint) (uint32, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOverTemperatureInfo", idx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceOverTemperatureInfo indicates an expected call of GetDeviceOverTemperatureInfo.
func (mr *CndevMockRecorder) GetDeviceOverTemperatureInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOverTemperatureInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceOverTemperatureInfo), idx)
}

// GetDeviceOverTemperatureShutdownThreshold mocks base method.
func (m *Cndev) GetDeviceOverTemperatureShutdownThreshold(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOverTemperatureShutdownThreshold", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceOverTemperatureShutdownThreshold indicates an expected call of GetDeviceOverTemperatureShutdownThreshold.
func (mr *CndevMockRecorder) GetDeviceOverTemperatureShutdownThreshold(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOverTemperatureShutdownThreshold", reflect.TypeOf((*Cndev)(nil).GetDeviceOverTemperatureShutdownThreshold), idx)
}

// GetDeviceOverTemperatureSlowdownThreshold mocks base method.
func (m *Cndev) GetDeviceOverTemperatureSlowdownThreshold(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOverTemperatureSlowdownThreshold", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceOverTemperatureSlowdownThreshold indicates an expected call of GetDeviceOverTemperatureSlowdownThreshold.
func (mr *CndevMockRecorder) GetDeviceOverTemperatureSlowdownThreshold(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOverTemperatureSlowdownThreshold", reflect.TypeOf((*Cndev)(nil).GetDeviceOverTemperatureSlowdownThreshold), idx)
}

// GetDevicePCIeInfo mocks base method.
func (m *Cndev) GetDevicePCIeInfo(idx uint) (int, uint, uint, uint16, uint16, uint, uint, uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePCIeInfo", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(uint)
	ret3, _ := ret[3].(uint16)
	ret4, _ := ret[4].(uint16)
	ret5, _ := ret[5].(uint)
	ret6, _ := ret[6].(uint)
	ret7, _ := ret[7].(uint)
	ret8, _ := ret[8].(uint)
	ret9, _ := ret[9].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9
}

// GetDevicePCIeInfo indicates an expected call of GetDevicePCIeInfo.
func (mr *CndevMockRecorder) GetDevicePCIeInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePCIeInfo", reflect.TypeOf((*Cndev)(nil).GetDevicePCIeInfo), idx)
}

// GetDevicePCIeReplayCount mocks base method.
func (m *Cndev) GetDevicePCIeReplayCount(idx uint) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePCIeReplayCount", idx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePCIeReplayCount indicates an expected call of GetDevicePCIeReplayCount.
func (mr *CndevMockRecorder) GetDevicePCIeReplayCount(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePCIeReplayCount", reflect.TypeOf((*Cndev)(nil).GetDevicePCIeReplayCount), idx)
}

// GetDevicePCIeThroughput mocks base method.
func (m *Cndev) GetDevicePCIeThroughput(idx uint) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePCIeThroughput", idx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDevicePCIeThroughput indicates an expected call of GetDevicePCIeThroughput.
func (mr *CndevMockRecorder) GetDevicePCIeThroughput(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePCIeThroughput", reflect.TypeOf((*Cndev)(nil).GetDevicePCIeThroughput), idx)
}

// GetDeviceParityError mocks base method.
func (m *Cndev) GetDeviceParityError(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceParityError", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceParityError indicates an expected call of GetDeviceParityError.
func (mr *CndevMockRecorder) GetDeviceParityError(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceParityError", reflect.TypeOf((*Cndev)(nil).GetDeviceParityError), idx)
}

// GetDevicePerformanceThrottleReason mocks base method.
func (m *Cndev) GetDevicePerformanceThrottleReason(idx uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePerformanceThrottleReason", idx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePerformanceThrottleReason indicates an expected call of GetDevicePerformanceThrottleReason.
func (mr *CndevMockRecorder) GetDevicePerformanceThrottleReason(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePerformanceThrottleReason", reflect.TypeOf((*Cndev)(nil).GetDevicePerformanceThrottleReason), idx)
}

// GetDevicePower mocks base method.
func (m *Cndev) GetDevicePower(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePower", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePower indicates an expected call of GetDevicePower.
func (mr *CndevMockRecorder) GetDevicePower(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePower", reflect.TypeOf((*Cndev)(nil).GetDevicePower), idx)
}

// GetDevicePowerManagementDefaultLimitation mocks base method.
func (m *Cndev) GetDevicePowerManagementDefaultLimitation(idx uint) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePowerManagementDefaultLimitation", idx)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePowerManagementDefaultLimitation indicates an expected call of GetDevicePowerManagementDefaultLimitation.
func (mr *CndevMockRecorder) GetDevicePowerManagementDefaultLimitation(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePowerManagementDefaultLimitation", reflect.TypeOf((*Cndev)(nil).GetDevicePowerManagementDefaultLimitation), idx)
}

// GetDevicePowerManagementLimitRange mocks base method.
func (m *Cndev) GetDevicePowerManagementLimitRange(idx uint) (uint16, uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePowerManagementLimitRange", idx)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(uint16)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDevicePowerManagementLimitRange indicates an expected call of GetDevicePowerManagementLimitRange.
func (mr *CndevMockRecorder) GetDevicePowerManagementLimitRange(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePowerManagementLimitRange", reflect.TypeOf((*Cndev)(nil).GetDevicePowerManagementLimitRange), idx)
}

// GetDevicePowerManagementLimitation mocks base method.
func (m *Cndev) GetDevicePowerManagementLimitation(idx uint) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePowerManagementLimitation", idx)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePowerManagementLimitation indicates an expected call of GetDevicePowerManagementLimitation.
func (mr *CndevMockRecorder) GetDevicePowerManagementLimitation(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePowerManagementLimitation", reflect.TypeOf((*Cndev)(nil).GetDevicePowerManagementLimitation), idx)
}

// GetDeviceProcessUtil mocks base method.
func (m *Cndev) GetDeviceProcessUtil(idx uint) ([]uint32, []uint32, []uint32, []uint32, []uint32, []uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceProcessUtil", idx)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].([]uint32)
	ret2, _ := ret[2].([]uint32)
	ret3, _ := ret[3].([]uint32)
	ret4, _ := ret[4].([]uint32)
	ret5, _ := ret[5].([]uint32)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// GetDeviceProcessUtil indicates an expected call of GetDeviceProcessUtil.
func (mr *CndevMockRecorder) GetDeviceProcessUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceProcessUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceProcessUtil), idx)
}

// GetDeviceRemappedRows mocks base method.
func (m *Cndev) GetDeviceRemappedRows(idx uint) (uint32, uint32, uint32, uint32, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRemappedRows", idx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(uint32)
	ret4, _ := ret[4].(uint32)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetDeviceRemappedRows indicates an expected call of GetDeviceRemappedRows.
func (mr *CndevMockRecorder) GetDeviceRemappedRows(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRemappedRows", reflect.TypeOf((*Cndev)(nil).GetDeviceRemappedRows), idx)
}

// GetDeviceRetiredPageInfo mocks base method.
func (m *Cndev) GetDeviceRetiredPageInfo(idx uint) (uint32, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRetiredPageInfo", idx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceRetiredPageInfo indicates an expected call of GetDeviceRetiredPageInfo.
func (mr *CndevMockRecorder) GetDeviceRetiredPageInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRetiredPageInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceRetiredPageInfo), idx)
}

// GetDeviceRetiredPagesOperation mocks base method.
func (m *Cndev) GetDeviceRetiredPagesOperation(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRetiredPagesOperation", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceRetiredPagesOperation indicates an expected call of GetDeviceRetiredPagesOperation.
func (mr *CndevMockRecorder) GetDeviceRetiredPagesOperation(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRetiredPagesOperation", reflect.TypeOf((*Cndev)(nil).GetDeviceRetiredPagesOperation), idx)
}

// GetDeviceSMluProfileIDInfo mocks base method.
func (m *Cndev) GetDeviceSMluProfileIDInfo(idx uint) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSMluProfileIDInfo", idx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceSMluProfileIDInfo indicates an expected call of GetDeviceSMluProfileIDInfo.
func (mr *CndevMockRecorder) GetDeviceSMluProfileIDInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSMluProfileIDInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceSMluProfileIDInfo), idx)
}

// GetDeviceSMluProfileInfo mocks base method.
func (m *Cndev) GetDeviceSMluProfileInfo(idx, profile uint) (cndev.SmluProfileInfo, uint32, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSMluProfileInfo", idx, profile)
	ret0, _ := ret[0].(cndev.SmluProfileInfo)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceSMluProfileInfo indicates an expected call of GetDeviceSMluProfileInfo.
func (mr *CndevMockRecorder) GetDeviceSMluProfileInfo(idx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSMluProfileInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceSMluProfileInfo), idx, profile)
}

// GetDeviceSN mocks base method.
func (m *Cndev) GetDeviceSN(idx uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSN", idx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceSN indicates an expected call of GetDeviceSN.
func (mr *CndevMockRecorder) GetDeviceSN(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSN", reflect.TypeOf((*Cndev)(nil).GetDeviceSN), idx)
}

// GetDeviceTemperature mocks base method.
func (m *Cndev) GetDeviceTemperature(idx uint) (int, int, int, []int, []int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTemperature", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].([]int)
	ret4, _ := ret[4].([]int)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetDeviceTemperature indicates an expected call of GetDeviceTemperature.
func (mr *CndevMockRecorder) GetDeviceTemperature(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTemperature", reflect.TypeOf((*Cndev)(nil).GetDeviceTemperature), idx)
}

// GetDeviceTensorUtil mocks base method.
func (m *Cndev) GetDeviceTensorUtil(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTensorUtil", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTensorUtil indicates an expected call of GetDeviceTensorUtil.
func (mr *CndevMockRecorder) GetDeviceTensorUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTensorUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceTensorUtil), idx)
}

// GetDeviceTinyCoreUtil mocks base method.
func (m *Cndev) GetDeviceTinyCoreUtil(idx uint) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTinyCoreUtil", idx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTinyCoreUtil indicates an expected call of GetDeviceTinyCoreUtil.
func (mr *CndevMockRecorder) GetDeviceTinyCoreUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTinyCoreUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceTinyCoreUtil), idx)
}

// GetDeviceUUID mocks base method.
func (m *Cndev) GetDeviceUUID(idx uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUUID", idx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceUUID indicates an expected call of GetDeviceUUID.
func (mr *CndevMockRecorder) GetDeviceUUID(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUUID", reflect.TypeOf((*Cndev)(nil).GetDeviceUUID), idx)
}

// GetDeviceUtil mocks base method.
func (m *Cndev) GetDeviceUtil(idx uint) (int, []int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUtil", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceUtil indicates an expected call of GetDeviceUtil.
func (mr *CndevMockRecorder) GetDeviceUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceUtil), idx)
}

// GetDeviceVersion mocks base method.
func (m *Cndev) GetDeviceVersion(idx uint) (uint, uint, uint, uint, uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceVersion", idx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(uint)
	ret3, _ := ret[3].(uint)
	ret4, _ := ret[4].(uint)
	ret5, _ := ret[5].(uint)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// GetDeviceVersion indicates an expected call of GetDeviceVersion.
func (mr *CndevMockRecorder) GetDeviceVersion(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceVersion", reflect.TypeOf((*Cndev)(nil).GetDeviceVersion), idx)
}

// GetDeviceVfState mocks base method.
func (m *Cndev) GetDeviceVfState(idx uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceVfState", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceVfState indicates an expected call of GetDeviceVfState.
func (mr *CndevMockRecorder) GetDeviceVfState(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceVfState", reflect.TypeOf((*Cndev)(nil).GetDeviceVfState), idx)
}

// GetDeviceVideoCodecUtil mocks base method.
func (m *Cndev) GetDeviceVideoCodecUtil(idx uint) ([]int, []int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceVideoCodecUtil", idx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].([]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceVideoCodecUtil indicates an expected call of GetDeviceVideoCodecUtil.
func (mr *CndevMockRecorder) GetDeviceVideoCodecUtil(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceVideoCodecUtil", reflect.TypeOf((*Cndev)(nil).GetDeviceVideoCodecUtil), idx)
}

// GetDeviceVoltageInfo mocks base method.
func (m *Cndev) GetDeviceVoltageInfo(idx uint) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceVoltageInfo", idx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDeviceVoltageInfo indicates an expected call of GetDeviceVoltageInfo.
func (mr *CndevMockRecorder) GetDeviceVoltageInfo(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceVoltageInfo", reflect.TypeOf((*Cndev)(nil).GetDeviceVoltageInfo), idx)
}

// GetSupportedEventTypes mocks base method.
func (m *Cndev) GetSupportedEventTypes(idx uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedEventTypes", idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSupportedEventTypes indicates an expected call of GetSupportedEventTypes.
func (mr *CndevMockRecorder) GetSupportedEventTypes(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedEventTypes", reflect.TypeOf((*Cndev)(nil).GetSupportedEventTypes), idx)
}

// GetTopologyRelationship mocks base method.
func (m *Cndev) GetTopologyRelationship(domain1, bus1, device1, function1, domain2, bus2, device2, function2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyRelationship", domain1, bus1, device1, function1, domain2, bus2, device2, function2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopologyRelationship indicates an expected call of GetTopologyRelationship.
func (mr *CndevMockRecorder) GetTopologyRelationship(domain1, bus1, device1, function1, domain2, bus2, device2, function2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyRelationship", reflect.TypeOf((*Cndev)(nil).GetTopologyRelationship), domain1, bus1, device1, function1, domain2, bus2, device2, function2)
}

// Init mocks base method.
func (m *Cndev) Init(healthCheck bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", healthCheck)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *CndevMockRecorder) Init(healthCheck any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*Cndev)(nil).Init), healthCheck)
}

// RegisterEventsHandleAndWait mocks base method.
func (m *Cndev) RegisterEventsHandleAndWait(slots []int, ch chan cndev.XIDInfoWithTimestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEventsHandleAndWait", slots, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterEventsHandleAndWait indicates an expected call of RegisterEventsHandleAndWait.
func (mr *CndevMockRecorder) RegisterEventsHandleAndWait(slots, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventsHandleAndWait", reflect.TypeOf((*Cndev)(nil).RegisterEventsHandleAndWait), slots, ch)
}

// Release mocks base method.
func (m *Cndev) Release() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *CndevMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*Cndev)(nil).Release))
}
