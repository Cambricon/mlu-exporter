// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Cambricon/mlu-exporter/pkg/host (interfaces: Host)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Host is a mock of Host interface
type Host struct {
	ctrl     *gomock.Controller
	recorder *HostMockRecorder
}

// HostMockRecorder is the mock recorder for Host
type HostMockRecorder struct {
	mock *Host
}

// NewHost creates a new mock instance
func NewHost(ctrl *gomock.Controller) *Host {
	mock := &Host{ctrl: ctrl}
	mock.recorder = &HostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Host) EXPECT() *HostMockRecorder {
	return m.recorder
}

// GetCPUStats mocks base method
func (m *Host) GetCPUStats() (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUStats")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCPUStats indicates an expected call of GetCPUStats
func (mr *HostMockRecorder) GetCPUStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUStats", reflect.TypeOf((*Host)(nil).GetCPUStats))
}

// GetMemoryStats mocks base method
func (m *Host) GetMemoryStats() (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryStats")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMemoryStats indicates an expected call of GetMemoryStats
func (mr *HostMockRecorder) GetMemoryStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryStats", reflect.TypeOf((*Host)(nil).GetMemoryStats))
}
