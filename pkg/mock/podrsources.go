// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Cambricon/mlu-exporter/pkg/podresources (interfaces: PodResources)
//
// Generated by this command:
//
//	mockgen -package mock -destination pkg/mock/podrsources.go -mock_names=PodResources=PodResources github.com/Cambricon/mlu-exporter/pkg/podresources PodResources
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	podresources "github.com/Cambricon/mlu-exporter/pkg/podresources"
	gomock "go.uber.org/mock/gomock"
)

// PodResources is a mock of PodResources interface.
type PodResources struct {
	ctrl     *gomock.Controller
	recorder *PodResourcesMockRecorder
	isgomock struct{}
}

// PodResourcesMockRecorder is the mock recorder for PodResources.
type PodResourcesMockRecorder struct {
	mock *PodResources
}

// NewPodResources creates a new mock instance.
func NewPodResources(ctrl *gomock.Controller) *PodResources {
	mock := &PodResources{ctrl: ctrl}
	mock.recorder = &PodResourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PodResources) EXPECT() *PodResourcesMockRecorder {
	return m.recorder
}

// GetDeviceToPodInfo mocks base method.
func (m *PodResources) GetDeviceToPodInfo() (map[string]podresources.PodInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceToPodInfo")
	ret0, _ := ret[0].(map[string]podresources.PodInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceToPodInfo indicates an expected call of GetDeviceToPodInfo.
func (mr *PodResourcesMockRecorder) GetDeviceToPodInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceToPodInfo", reflect.TypeOf((*PodResources)(nil).GetDeviceToPodInfo))
}
